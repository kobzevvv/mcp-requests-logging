name: CI - Dev Deploy and Insert Test

on:
  workflow_dispatch: {}

jobs:
  deploy-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps
        run: npm ci

      - name: Type check
        run: npm run check

      - name: Deploy to Cloudflare (dev env)
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          BIGQUERY_PROJECT_ID: ${{ secrets.BIGQUERY_PROJECT_ID }}
          BIGQUERY_CREDS_JSON: ${{ secrets.BIGQUERY_CREDS_JSON }}
          WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
        run: |
          npx wrangler whoami || true
          echo "$BIGQUERY_CREDS_JSON" | npx wrangler secret put BIGQUERY_CREDS_JSON --env dev
          if [ -n "$WEBHOOK_SECRET" ]; then echo "$WEBHOOK_SECRET" | npx wrangler secret put WEBHOOK_SECRET --env dev; fi
          npx wrangler deploy --env dev --var BIGQUERY_PROJECT_ID=$BIGQUERY_PROJECT_ID

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Discover Worker URL
        id: discover
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          SUBDOMAIN=$(curl -sf -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/subdomain" | jq -r '.result.subdomain')
          if [ -z "$SUBDOMAIN" ] || [ "$SUBDOMAIN" = "null" ]; then echo "Failed to fetch account subdomain"; exit 1; fi
          BASE=$(node -p "require('fs').readFileSync('wrangler.toml','utf8').match(/^name\\s*=\\s*\\\"([^\\\"]+)\\\"/m)[1]")
          SCRIPT="$BASE-dev"
          URL="https://$SCRIPT.$SUBDOMAIN.workers.dev"
          echo "Discovered URL: $URL" >&2
          echo "url=$URL" >> $GITHUB_OUTPUT
      
      - name: Send test event
        id: send
        env:
          URL: ${{ steps.discover.outputs.url }}
          DEV_WORKER_URL: ${{ secrets.DEV_WORKER_URL }}
          WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
        run: |
          node - <<'NODE'
          const crypto = require('crypto');
          const rawPrefer = (process.env.DEV_WORKER_URL || '').trim();
          const rawFallback = (process.env.URL || '').trim();
          const sanitize = (u) => {
            let v = (u || '').trim().replace(/^"|"$/g, '');
            if (v && !/^https?:\/\//i.test(v)) v = 'https://' + v;
            return v;
          };
          const prefer = sanitize(rawPrefer);
          const fallback = sanitize(rawFallback);
          const url = prefer || fallback;
          const ok = /^https?:\/\//i.test(url);
          console.log('URL debug:', {
            preferLen: prefer.length,
            fallbackLen: fallback.length,
            preferStartsWithHttp: /^https?:\/\//i.test(prefer),
            fallbackStartsWithHttp: /^https?:\/\//i.test(fallback)
          });
          if (!ok) {
            console.error('Invalid or missing URL. Provide DEV_WORKER_URL secret or ensure Discover step output is non-empty.');
            process.exit(1);
          }
          const body = JSON.stringify({
            schema_version: 1,
            source: 'ci',
            timestamp: new Date().toISOString(),
            level: 'INFO',
            logger: 'ci',
            message: 'ci_test',
            exc_info: null,
            extra: { event: 'ci_test', request_id: process.env.GITHUB_RUN_ID }
          });
          const headers = { 'Content-Type': 'application/json; charset=utf-8' };
          const secret = (process.env.WEBHOOK_SECRET || '').trim();
          if (secret) {
            const sig = crypto.createHmac('sha256', secret).update(body).digest('hex');
            headers['X-Signature'] = `sha256=${sig}`;
          }
          (async () => {
            const res = await fetch(url, { method: 'POST', headers, body });
            const text = await res.text();
            console.log('Worker response:', res.status, text);
            if (!res.ok) throw new Error('Worker returned non-2xx');
          })().catch(e => { console.error(e); process.exit(1); });
          NODE

      - name: Verify insert in BigQuery
        env:
          PROJECT_ID: ${{ secrets.BIGQUERY_PROJECT_ID }}
          CREDS_JSON: ${{ secrets.BIGQUERY_CREDS_JSON }}
        run: |
          echo "$CREDS_JSON" > sa.json
          npm i @google-cloud/bigquery@7 --no-save
          node - <<'NODE'
          const {BigQuery} = require('@google-cloud/bigquery');
          const fs = require('fs');
          const sa = JSON.parse(fs.readFileSync('sa.json','utf8'));
          const bq = new BigQuery({projectId: process.env.PROJECT_ID, credentials: sa});
          (async () => {
            const [rows] = await bq.query({
              query: `SELECT COUNT(1) c FROM ` +
                "`"+process.env.PROJECT_ID+".hiring_router_mcp.test_events_logging` " +
                `WHERE JSON_VALUE(extra, '$.request_id') = @runId`,
              params: { runId: process.env.GITHUB_RUN_ID },
              location: 'us-central1'
            });
            const ok = rows[0]?.c > 0;
            if (!ok) { console.error('Row not found'); process.exit(1); }
            console.log('Found row for run', process.env.GITHUB_RUN_ID);
          })().catch(e=>{ console.error(e); process.exit(1); });
          NODE
