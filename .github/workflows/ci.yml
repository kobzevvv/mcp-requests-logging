name: CI - Dev Deploy and Insert Test

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  deploy-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps
        run: npm ci

      - name: Type check
        run: npm run check

      - name: Deploy to Cloudflare (dev env)
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          BIGQUERY_PROJECT_ID: ${{ secrets.BIGQUERY_PROJECT_ID }}
          BIGQUERY_CREDS_JSON: ${{ secrets.BIGQUERY_CREDS_JSON }}
          WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
        run: |
          npx wrangler whoami || true
          echo "$BIGQUERY_CREDS_JSON" | npx wrangler secret put BIGQUERY_CREDS_JSON --env dev
          if [ -n "$WEBHOOK_SECRET" ]; then echo "$WEBHOOK_SECRET" | npx wrangler secret put WEBHOOK_SECRET --env dev; fi
          npx wrangler deploy --env dev --var BIGQUERY_PROJECT_ID=$BIGQUERY_PROJECT_ID

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Discover Worker URL
        id: discover
        run: |
          URL=$(npx wrangler deployments list --env dev --json | jq -r '.[0].urls[0]')
          echo "url=$URL" >> $GITHUB_OUTPUT

      - name: Send test event
        id: send
        env:
          URL: ${{ steps.discover.outputs.url }}
        run: |
          echo "{"schema_version":1,"source":"ci","timestamp":"$(date -u +%Y-%m-%dT%H:%M:%SZ)","level":"INFO","logger":"ci","message":"ci_test","extra":{"event":"ci_test","request_id":"${{ github.run_id }}"}}" > event.json
          curl -i -s -o /tmp/resp.txt -w "%{http_code}" -X POST "$URL" -H "Content-Type: application/json; charset=utf-8" --data-binary @event.json | tee /tmp/status.txt
          echo "status=$(cat /tmp/status.txt)" >> $GITHUB_OUTPUT

      - name: Verify insert in BigQuery
        env:
          PROJECT_ID: ${{ secrets.BIGQUERY_PROJECT_ID }}
          CREDS_JSON: ${{ secrets.BIGQUERY_CREDS_JSON }}
        run: |
          echo "$CREDS_JSON" > sa.json
          npm i @google-cloud/bigquery@7 --no-save
          node - <<'NODE'
          const {BigQuery} = require('@google-cloud/bigquery');
          const fs = require('fs');
          const sa = JSON.parse(fs.readFileSync('sa.json','utf8'));
          const bq = new BigQuery({projectId: process.env.PROJECT_ID, credentials: sa});
          (async () => {
            const [rows] = await bq.query({
              query: `SELECT COUNT(1) c FROM ` +
                "`"+process.env.PROJECT_ID+".hiring_router_mcp.test_events_logging` " +
                `WHERE JSON_VALUE(extra, '$.request_id') = @runId`,
              params: { runId: process.env.GITHUB_RUN_ID }
            });
            const ok = rows[0]?.c > 0;
            if (!ok) { console.error('Row not found'); process.exit(1); }
            console.log('Found row for run', process.env.GITHUB_RUN_ID);
          })().catch(e=>{ console.error(e); process.exit(1); });
          NODE

      - name: Report CI status to BigQuery (always)
        if: always()
        env:
          PROJECT_ID: ${{ secrets.BIGQUERY_PROJECT_ID }}
          CREDS_JSON: ${{ secrets.BIGQUERY_CREDS_JSON }}
          JOB_STATUS: ${{ job.status }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REF: ${{ github.ref }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
          GITHUB_RUN_ATTEMPT: ${{ github.run_attempt }}
        run: |
          echo "$CREDS_JSON" > sa.json
          npm i @google-cloud/bigquery@7 --no-save
          node - <<'NODE'
          const {BigQuery} = require('@google-cloud/bigquery');
          const fs = require('fs');
          const sa = JSON.parse(fs.readFileSync('sa.json','utf8'));
          const bq = new BigQuery({projectId: process.env.PROJECT_ID, credentials: sa});
          const repo = process.env.GITHUB_REPOSITORY;
          const runId = process.env.GITHUB_RUN_ID;
          const actionUrl = `https://github.com/${repo}/actions/runs/${runId}`;
          const level = process.env.JOB_STATUS === 'success' ? 'INFO' : 'ERROR';
          const row = {
            schema_version: 1,
            source: 'github_actions',
            timestamp: new Date().toISOString(),
            level,
            logger: 'gha',
            message: 'ci_status',
            exc_info: null,
            extra: {
              event: 'ci_status',
              job_status: process.env.JOB_STATUS,
              repo: repo,
              sha: process.env.GITHUB_SHA,
              ref: process.env.GITHUB_REF,
              run_id: runId,
              run_number: process.env.GITHUB_RUN_NUMBER,
              run_attempt: process.env.GITHUB_RUN_ATTEMPT,
              action_url: actionUrl
            }
          };
          (async () => {
            const table = bq.dataset('hiring_router_mcp').table('test_events_logging');
            await table.insert([{ insertId: runId, json: row }]);
            console.log('Reported CI status to BigQuery');
          })().catch(e=>{ console.error(e); process.exit(1); });
          NODE
