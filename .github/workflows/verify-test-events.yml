name: Verify Test Events in BigQuery (E2E)

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  verify-e2e:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Send test event via Worker
        env:
          DEV_WORKER_URL: ${{ secrets.DEV_WORKER_URL }}
          WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
          RUN_ID: ${{ github.run_id }}
        run: |
          if [ -z "$DEV_WORKER_URL" ]; then echo "Missing DEV_WORKER_URL secret"; exit 1; fi
          node - <<'NODE'
          const crypto = require('crypto');
          const url = process.env.DEV_WORKER_URL;
          const secret = process.env.WEBHOOK_SECRET;
          const runId = process.env.RUN_ID;
          const body = JSON.stringify({
            schema_version: 1,
            source: 'github_actions',
            timestamp: new Date().toISOString(),
            level: 'INFO',
            logger: 'gha',
            message: 'ci_test',
            exc_info: null,
            extra: { event: 'ci_test', request_id: runId }
          });
          const headers = { 'Content-Type': 'application/json; charset=utf-8' };
          if (secret) {
            const sig = crypto.createHmac('sha256', secret).update(body).digest('hex');
            headers['X-Signature'] = `sha256=${sig}`;
          }
          (async () => {
            const res = await fetch(url, { method: 'POST', headers, body });
            const text = await res.text();
            console.log('Worker response:', res.status, text);
            if (!res.ok) throw new Error('Worker returned non-2xx');
          })().catch(e=>{ console.error(e); process.exit(1); });
          NODE

      - name: Install BigQuery client
        run: npm i @google-cloud/bigquery@7 --no-save

      - name: Verify row reached BigQuery
        env:
          PROJECT_ID: ${{ secrets.BIGQUERY_PROJECT_ID }}
          CREDS_JSON: ${{ secrets.BIGQUERY_CREDS_JSON }}
          RUN_ID: ${{ github.run_id }}
        run: |
          echo "$CREDS_JSON" > sa.json
          node - <<'NODE'
          const {BigQuery} = require('@google-cloud/bigquery');
          const fs = require('fs');
          const sa = JSON.parse(fs.readFileSync('sa.json','utf8'));
          const projectId = process.env.PROJECT_ID;
          const runId = process.env.RUN_ID;
          const bq = new BigQuery({projectId, credentials: sa});
          (async () => {
            const [rows] = await bq.query({
              query: `SELECT COUNT(1) c
                      FROM \`${projectId}.hiring_router_mcp.test_events_logging\`
                      WHERE JSON_VALUE(extra, '$.request_id') = @runId`,
              params: { runId },
              location: 'us-central1'
            });
            const count = Number(rows[0]?.c || 0);
            console.log('Rows for run_id', runId, ':', count);
            if (count < 1) { console.error('Row not found'); process.exit(1); }
          })().catch(e=>{ console.error(e); process.exit(1); });
          NODE
